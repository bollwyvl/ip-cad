// Generated by CoffeeScript 1.8.0

/*
The browser-side counterpart to CAD

@author Nicholas Bollweg
@copyright Nicholas Bollweg 2014
@version 0.1.0
@license BSD
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(define) {
    return define(["widgets/js/manager", "widgets/js/widget", "jquery", "underscore", "backbone"], function(manager, widget, $, _, Backbone) {
      var CADView, api;
      CADView = (function(_super) {
        __extends(CADView, _super);

        function CADView() {
          this.cameraChange = __bind(this.cameraChange, this);
          this.dimensionsChange = __bind(this.dimensionsChange, this);
          this.cadChange = __bind(this.cadChange, this);
          this.assemblyChange = __bind(this.assemblyChange, this);
          this.frameLoaded = __bind(this.frameLoaded, this);
          this.render = __bind(this.render, this);
          return CADView.__super__.constructor.apply(this, arguments);
        }

        CADView.prototype.className = "ipcad CADView";

        CADView.prototype.render = function() {
          _.defer(this.update);
          this.listenTo(this.model, {
            "change:assembly_url": this.assemblyChange,
            "change:width change:height": this.dimensionsChange,
            "change:camera_near change:camera_near": this.cameraChange
          });
          this.viewModel = new Backbone.Model({
            cad: null,
            frame: null
          });
          this.listenTo(this.viewModel, {
            "change:cad": this.cadChange
          });
          this.$frame = $("<iframe/>", {
            src: "/nbextensions/ipcad/CADViewFrame.html"
          });
          this.$frame.load(this.frameLoaded()).appendTo(this.$el);
          return this;
        };

        CADView.prototype.frameLoaded = function() {
          var view;
          view = this;
          return function(frame) {
            view.viewModel.set("frame", this);
            this.cadLoaded = (function(_this) {
              return function() {
                var cad;
                if (cad = _this.contentWindow.cad) {
                  return view.viewModel.set("cad", cad);
                }
                return _.delay(_this.cadLoaded, 1000);
              };
            })(this);
            return this.cadLoaded();
          };
        };

        CADView.prototype.assemblyChange = function() {
          var assemblyUrl, cad;
          if (cad = this.viewModel.get("cad")) {
            if (assemblyUrl = this.model.get("assembly_url")) {
              if (!assemblyUrl.match(/https?:\/\//)) {
                assemblyUrl = $("<a/>", {
                  href: "."
                })[0].href + assemblyUrl;
              }
              cad.load(assemblyUrl);
            }
          }
          return this;
        };

        CADView.prototype.cadChange = function() {
          if (this.model.get("assembly_url")) {
            this.assemblyChange();
          }
          return this;
        };

        CADView.prototype.dimensionsChange = function() {
          this.$el.css({
            width: this.model.get("width") || "100%",
            height: this.model.get("height")
          });
          return this;
        };

        CADView.prototype.cameraChange = function() {
          var cad, cam, viewer;
          cad = this.viewModel.get("cad");
          viewer = cad._viewer;
          cam = viewer.camera;
          cam.near = this.model.get("camera_near") || cam.near;
          cam.far = this.model.get("camera_far") || cam.far;
          cam.updateProjectionMatrix();
          return viewer.invalidate();
        };

        return CADView;

      })(widget.DOMWidgetView);
      manager.WidgetManager.register_widget_view("CADView", CADView);
      return api = {
        CADView: CADView
      };
    });
  }).call(this, this.define);

}).call(this);
